<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2011 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Default
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */

/** Get our classes */
require_once dirname(__FILE__).'/CheckPluginTestBase.php';
require_once dirname(__FILE__)
    .'/../../../../endpoints/plugins/check/DailyReportCheckPlugin.php';
/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Default
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class DailyReportCheckPluginTest extends CheckPluginTestBase
{

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {

        $config = array(
            "script_gateway" => 1,
            "admin_email" => "test@dflytech.com",
            "pluginData" => array(
                "DailyReportCheckPlugin" => array(
                    "enable" => true,
                ),
            ),
            "test" => true,
        );
        $this->config = &ConfigContainer::singleton();
        $this->config->forceConfig($config);
        $this->socket = &$this->config->sockets->getSocket("default");
        $this->device = array(
            "id"         => 0x000019,
            "DeviceID"   => "000019",
            "HWPartNum"  => "0039-26-00-P",
            "FWPartNum"  => "0039-26-00-P",
        );

        $this->control = new PeriodicPlugins(array(), $this->device);
        $this->o = new DailyReportCheckPlugin(array(), $this->control);
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        unset($this->o);
    }

    /**
    * Data provider for testRegisterPlugin
    *
    * @return array
    */
    public static function dataRegisterPlugin()
    {
        return array(
            array("DailyReportCheckPlugin"),
        );
    }

    /**
    * Data provider for testConstructor
    *
    * @return array
    */
    public static function dataConstructor()
    {
        return array(
            array(
                array(
                    "script_gateway" => 1,
                    "admin_email" => "test@dflytech.com",
                    "pluginData" => array(
                        "DailyReportCheckPlugin" => array(
                            "enable" => true,
                        ),
                    ),
                ),
                array(
                    "id"         => 0x000019,
                    "DeviceID"   => "000019",
                    "HWPartNum"  => "0039-26-00-P",
                    "FWPartNum"  => "0039-26-00-P",
                ),
                true,
                1,
                "test@dflytech.com",
            ),
            array(
                array(
                    "script_gateway" => 1,
                    "admin_email" => "",
                    "pluginData" => array(
                        "DailyReportCheckPlugin" => array(
                            "enabkle" => true,
                        ),
                    ),
                ),
                array(
                    "id"         => 0x000019,
                    "DeviceID"   => "000019",
                    "HWPartNum"  => "0039-26-00-P",
                    "FWPartNum"  => "0039-26-00-P",
                ),
                false,
                null,
                "",
            ),
            array(
                array(
                    "script_gateway" => 1,
                    "admin_email" => "test@dflytech.com",
                    "pluginData" => array(
                        "DailyReportCheckPlugin" => array(
                            "enable" => false,
                        ),
                    ),
                ),
                array(
                    "id"         => 0x000019,
                    "DeviceID"   => "000019",
                    "HWPartNum"  => "0039-26-00-P",
                    "FWPartNum"  => "0039-26-00-P",
                ),
                false,
                null,
                "",
            ),
        );
    }
    /**
    * test the constructor
    *
    * @param array  $config     The configuration to use
    * @param array  $device     The device array to use
    * @param bool   $enable     Whether the plugin should be enabled
    * @param int    $gatewayKey The gateway key to expect
    * @param string $to         The 'To' to expect
    *
    * @return null
    *
    * @dataProvider dataConstructor
    */
    public function testConstructor(
        $config, $device, $enable, $gatewayKey, $to
    ) {
        $this->config->forceConfig($config);
        $control = new PeriodicPlugins(array(), $device);
        $o = new DailyReportCheckPlugin(array(), $control);
        $this->assertAttributeSame($enable, "enable", $o, "Enable is wrong");
        if ($enable) {
            $dev = $this->readAttribute($o, "device");
            $this->assertInternalType("object", $dev);
            $this->assertTrue(is_a($dev, "DeviceContainer"));
            $this->assertAttributeSame(
                $gatewayKey, "gatewayKey", $o, "Gateway Key is Wrong"
            );
            $subject = $this->readAttribute($o, "_subject");
            $this->assertInternalType("string", $subject);
            $this->assertFalse(empty($subject));
            $this->assertAttributeSame(
                $to, "_to", $o, "To field is wrong"
            );
        }
    }
    /**
    * Data provider for testReady
    *
    * @return array
    */
    public static function dataReady()
    {
        return array(
            array(
                array(
                    "script_gateway" => 1,
                    "admin_email" => "test@dflytech.com",
                    "pluginData" => array(
                        "DailyReportCheckPluginTestStub" => array(
                            "enable" => true,
                        ),
                    ),
                    "test" => true,
                ),
                time(),
                false,
            ),
            array(
                array(
                    "script_gateway" => 1,
                    "admin_email" => "test@dflytech.com",
                    "pluginData" => array(
                        "DailyReportCheckPluginTestStub" => array(
                            "enable" => true,
                        ),
                    ),
                    "test" => true,
                ),
                time()-86400,
                true,
            ),
            array(
                array(
                    "script_gateway" => 1,
                    "admin_email" => "test@dflytech.com",
                    "pluginData" => array(
                        "DailyReportCheckPluginTestStub" => array(
                            "enable" => false,
                        ),
                    ),
                    "test" => true,
                ),
                time()-86400,
                false,
            ),
            array(
                array(
                    "script_gateway" => 1,
                    "admin_email" => "",
                    "pluginData" => array(
                        "DailyReportCheckPluginTestStub" => array(
                            "enable" => true,
                        ),
                    ),
                    "test" => true,
                ),
                time()-86400,
                false,
            ),
        );
    }
    /**
    * test the constructor
    *
    * @param array $config The configuration to use
    * @param int   $last   The date to set as the last run
    * @param bool  $expect The expected return value
    *
    * @return null
    *
    * @dataProvider dataReady
    */
    public function testReady($config, $last, $expect)
    {
        $this->config->forceConfig($config);
        $o = new DailyReportCheckPluginTestStub(array(), $this->control);
        $o->last($last);
        $this->assertSame($expect, $o->ready());
    }
    /**
    * Data provider for testConstructor
    *
    * @return array
    */
    public static function dataMain()
    {
        return array(
            array(
                array(
                    array(
                        "id"         => 0x000048,
                        "DeviceID"   => "000048",
                        "HWPartNum"  => "0039-23-00-P",
                        "FWPartNum"  => "0039-23-00-P",
                        "GatewayKey" => 1,
                        "params" => array(
                            "DriverInfo" => array(
                                "LastPoll" => time(),
                                "LastConfig" => time(),
                                "LastHistory" => time(),
                                "LastAnalysis" => time(),
                            ),
                        ),
                    ),
                ),
                "test@dflytech.com",
                "Daily Report on [A-Za-z0-9]+",
                array(
                    "Date Header" => "CURRENT DATE AND TIME[ \r\n\t]+",
                    "Date" => "[Mon|Tue|Wed|Thu|Fri|Sat|Sun]{1}, [0-9]{2} "
                        ."[A-Za-z]{3} [0-9]{4} [0-9]{2}:[0-9]{2}:[0-9]{2} [0-9\-]+",
                    "Last Header" => "CURRENT DEVICES[ \r\n\t]+",
                    "LastPoll" => "LastPoll\t[0-9]+\/[0-9]+[\r\n]{1}",
                    "LastConfig" => "LastConfig\t[0-9]+\/[0-9]+[\r\n]{1}",
                    "LastHistory" => "LastHistory\t[0-9]+\/[0-9]+[\r\n]{1}",
                    "LastAnalysis" => "LastAnalysis\t[0-9]+\/[0-9]+[\r\n]{1}",
                ),
            ),
        );
    }
    /**
    * test the constructor
    *
    * @param array  $devs    The devices to load
    * @param string $to      Regular expression for the to field
    * @param string $subject Regular expression of the subject
    * @param array  $expect  What to expect
    *
    * @return null
    *
    * @dataProvider dataMain
    */
    public function testMain($devs, $to, $subject, $expect)
    {
        $dev = new DeviceContainer();
        foreach ($devs as $d) {
            $dev->clearData();
            $dev->fromAny($d);
            $dev->insertRow();
        }
        $ret = $this->o->main();
        $this->assertRegExp(
            "/".$to."/",
            $ret["To"],
            "To is wrong"
        );
        $this->assertRegExp(
            "/".$subject."/",
            $ret["Subject"],
            "Subject is wrong"
        );
        foreach ($expect as $k => $e) {
            $this->assertRegExp(
                "/".$e."/",
                $ret["Body"],
                "$k is not found"
            );
        }
    }
}
/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Default
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class DailyReportCheckPluginTestStub extends DailyReportCheckPlugin
{
    /**
    * Set the last time
    *
    * @param int $value The value to set
    *
    * @return bool True if ready to return, false otherwise
    */
    public function last($value)
    {
        $this->last = (int)$value;
    }
}
?>
