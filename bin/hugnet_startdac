#!/usr/bin/env php
<?php
/**
 * Monitors incoming packets
 *
 * PHP Version 5
 *
 * <pre>
 * Scripts related to HUGnet
 * Copyright (C) 2007-2012 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Scripts
 * @package    Scripts
 * @subpackage Misc
 * @author     Scott Price <prices@hugllc.com>
 * @author     Jeff Liesmaki <jeffl@hugllc.com>
 * @copyright  2007-2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:Scripts
 *
 */
/** HUGnet code */
//require_once dirname(__FILE__).'/../head.inc.php';
/** Packet log include stuff */
require_once 'HUGnetLib/ui/Daemon.php';
require_once 'HUGnetLib/ui/Args.php';

$config = &\HUGnet\ui\Args::factory(
    $argv, $argc,
    array(
        "i" => array("name" => "DeviceID", "type" => "string", "args" => true),
        "D" => array("name" => "Data", "type" => "string", "args" => true),
    )
);

$config->addLocation("/usr/share/HUGnet/config.ini");
$cli = &\HUGnet\ui\Daemon::factory($config);
$cli->help(
    $cli->system()->get("program")."
Copyright Hunt Utilities Group, LLC
HUGnet Scripts v".trim(file_get_contents("HUGnetScripts/VERSION.TXT", true))."  "
."HUGnetLib v".$cli->system()->get("version")."

Sends a series of DAC set packets to HUGnetLab endpoints.

Usage: ".$cli->system()->get("program")." -i <DeviceID> [-v] [-f <file>]
Arguments:
    -i <DeviceID>   The device ID to use.  Should be a hex value up to 6 digits
    -v              Increment the verbosity
    -f <file>       The config file to use",
    $config->h
);
if (strlen($config->i) == 0) {
    $cli->help();
    $cli->out();
    $cli->out("DeviceID must be specified");
    exit(1);
}

/* save input control voltage */
$ctlVoltage = $config->D;


//$sleeptime = 2100;   /* sleep 35 minutes = 2100 seconds */
$sleeptime = 45 * 60;
$CGNDOffset = 0.95;

/************************************************************/
/* 0.95 is added to table values to compensate for the fact */
/* that the DAC output will be reference to CGND which is   */
/* 0.95 VDC below AGND.                                     */
/************************************************************/
$ControlVolts = array(
    0  => 0,
    1  => 0.053,
    2  => 0.1,
    3  => 0.2,
    4  => 0.3,
    5  => 0.4,
    6  => 0.5,
    7  => 0.6,
    8  => 0.7,
    9  => 0.8,
    10 => 0.85,
    11 => 0.9,
    12 => 0.95,
    13 => 1,
    14 => 1.05,
    15 => 1.1,
    16 => 1.2,
    17 => 0,
);

$stepVoltage = 2.5 / 4095;

foreach ($ControlVolts as $i => $val) {

    $cli->out("step: ".$i);
    $strVolts = '%4.2f';
    $strVolts = sprintf($strVolts, $ControlVolts[$i]);
    $cli->out("DAC Control Voltage: ".$strVolts);

    $ctlVoltage = ($ControlVolts[$i] + $CGNDOffset);

    $steps = (int)($ctlVoltage / $stepVoltage);

    $dacVal = sprintf("%02X%02X", ($steps & 0xFF), (($steps >> 8) & 0xFF));

    $pkt = $cli->system()->network()->send(
        array(
            "To" => $config->i,
            "Command" => '0x64',
            "Data" => $dacVal,
        )
    );
    if (is_object($pkt)) {
        $reply = $pkt->Reply();
        if (is_null($reply)) {
            print "No Reply\r\n";
        } else if (!empty($reply)) {
            $dacOut = hexdec(substr($reply, 0, 2)) + (hexdec(substr($reply, 2, 2)) << 8);
            $dacV = $dacOut * $stepVoltage;
            $cli->out("Confirm ".round($dacV, 4)." V to AGND");
            $cli->out("Confirm ".round($dacV - $CGNDOffset, 4)." V to CGND");
        } else {
            print "Empty Reply\r\n";
        }
/*
        print "From: ".$pkt->From();
        print " -> To: ".$pkt->To();
        print "  Command: ".$pkt->Command();
        print "  Type: ".$pkt->Type();
        print "\r\n";
        $data = $pkt->Data();
        if (!empty($data)) {
            // swap high and low bytes to display Big Endian
            $high = substr($data,0,2);
            $low = substr($data,2,2);
            $data = $low.$high;
            print "Data: ".$data."\r\n";
        }
        $data = $pkt->Reply();
        if (is_null($data)) {
            print "No Reply\r\n";
        } else if (!empty($data)) {
            // swap high and low bytes to display Big Endian
            $high = substr($data,0,2);
            $low = substr($data,2,2);
            $data = $low.$high;
            print "Reply Data: ".$data."\r\n";
        } else {
            print "Empty Reply\r\n";
        }
*/
    } else {
        $cli->out("No Reply");
    }

    $wait = time() + $sleeptime;
    $count = 0;
    while ((time() < $wait) && $cli->loop()) {
        $cli->main();
        sleep(5);
        $count++;
        if ($count >= 12) {
            $cli->out(round(($wait - time()) / 60)." Minutes left");
            $count = 0;
        }
    }

    if (!$cli->loop()){
        break;
    }

} /* end of for loop */

print "Finished\n";

?>
