#!/usr/bin/env php
<?php
/**
 * Loads a program into a controller board
 *
 * PHP Version 5
 *
 * <pre>
 * Scripts related to HUGnet
 * Copyright (C) 2007-2011 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Scripts
 * @package    Scripts
 * @subpackage Test
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:Scripts
 *
 */
require_once 'HUGnetLib/HUGnetLib.php';
$config = HUGnetLib::Args(
    array(
        "i" => array("name" => "DeviceID", "type" => "string", "args" => true),
        "D" => array("name" => "Data", "type" => "string", "args" => true),
        "a" => array(
            "name" => "AVR", "type" => "bool", "args" => false, "default" => false,
        ),
        "p" => array("name"=> "Programmer", "type" => "string", "args" => true, 
        "default" => "avrispv2"),
    ),
    "args",
    $argv
);

$config->addLocation("/usr/share/HUGnet/config.ini");
$cli = HUGnetLib::ui($config, "CLI");
$cli->help(
    $cli->system()->get("program")."
Copyright Hunt Utilities Group, LLC
HUGnet Scripts v".trim(file_get_contents("HUGnetScripts/VERSION.TXT", true))."  "
."HUGnetLib v".$cli->system()->get("version")."

A utility to load programs into devices

Usage: ".$cli->system()->get("program")." [-v] [-a] [-p] [-f <file>] -i <DeviceID> -D <file>
Arguments:
    -i <DeviceID>   The device ID to load.  Should be a hex value up to 6 digits
    -D <file>       The file to load into the device
    -a              Force the programmer into AVR mode
    -p              Programmer to use (default - avrispv2)
    -v              Increment the verbosity
    -f <file>       The config file to use",
    $config->h
);
/*
if (strlen($config->i) == 0) {
    $cli->help();
    $cli->out();
    $cli->out("DeviceID must be specified");
    exit(1);
}
*/
$path = dirname($config->D);
if (empty($path)) {
    $path = ".";
}
$file = basename($config->D);
if (strlen($file) == 0) {
    $cli->help();
    $cli->out();
    $cli->out("File with firmware must be specified");
    exit(1);
}


$programmer = $config->p;
if ((strcmp($programmer, "avrispv2") != 0) && 
    (strcmp($programmer, "dragon_isp") != 0)) {
    $cli->out("Invalid programmer specified!");
    exit(1);
} else {
    $cli->out();
    $cli->out("Programmer Selected is ".$programmer);
    $cli->out();
}


$DeviceID = trim(strtoupper($config->i));
if (!empty($DeviceID)) {
    $DevID = hexdec($DeviceID);
    $dev = $cli->system()->device(
        array("DeviceID" => sprintf("%06X", $DevID), "id" => $DevID)
    );
} else {
    $dev = $cli->system()->device();
}
$firmware = $dev->firmware();
$firmware->table()->fromFile($file, $path);
$fwpart = $firmware->get("FWPartNum");
if ($fwpart === "0039-38-03-C") {
    $cli->out();
    $cli->out("Error:  This firmware can not be loaded using this utility");
    $cli->out();
    exit(1);
}
$cli->out(
    "Found firmware ".$fwpart." v".$firmware->get("Version")
);

$loadable = (bool)$dev->get("loadable");
$loadable = $loadable && ($fwpart != "0039-38-02-C");
$loadable = $loadable && ($fwpart != "0039-38-82-C");
$loadable = $loadable && ($fwpart != "0039-38-81-C");

$ret = false;

if ($loadable && !$config->a) {
    $ret = $dev->action()->loadFirmware($firmware);
} else if (($dev->get("arch") === "AVR") 
    || ($firmware->get("HWPartNum") == "0039-28")
    || ($firmware->get("HWPartNum") == "0039-12")
    || (($fwpart == "0039-38-81-C") && (strtolower($firmware->get("Target")) == "atxmegae5"))
    || $config->a
) {
    switch (strtolower($firmware->get("Target"))) {
        case "atxmegae5":
            $ptarget = "x32e5";
            break;
        case "atmega168":
            $ptarget = "m168";
            break;
        case "attiny861":
            $ptarget = "t861";
            break;
        default:
            $ptarget = "targetunknown";
            break;
    }

    $Prog = 'avrdude -c '.$programmer.' -p '.$ptarget.' -P usb -B 10 -i 100';

    // Program the flash
    $flashname = tempnam("/tmp", "flash");

    $fp = fopen($flashname, "w");

    fwrite($fp, $firmware->get("Code"));
    fclose($fp);

    // Program the E2
    $eename = tempnam("/tmp", "eeprom");

    $fp = fopen($eename, "w");
    fwrite($fp, $firmware->get("Data"));
    fclose($fp);

    //    $flash = ' --segment=flash --erase --upload --verify if='.$tempname;
    $flash = " -e -U flash:w:$flashname -U eeprom:w:$eename";
    print "Using: ".$Prog.$flash."\n";
    if (passthru($Prog.$flash) == 0) {
        $ret = true;
    } else {
        $ret = false;
    }

    unlink($flashname);
    unlink($eename);
} else if (strtolower($firmware->get("Target")) == "photon") {
    if ($dev->action()->ping(true)) {
        $pkt = $dev->action()->send(
            array(
                "Command" => "BOOTLOADER",
                "Data" => "DEADBEEF"
            ),
            null,
            array(
                "NoReply" => true
            )
        );
        sleep(2);
    }
    $allcode = $firmware->getCode();
    $count = count($allcode);
    foreach ($allcode as $key => $code) {
        $flashname = tempnam("/tmp", "flash");
        $fp = fopen("$flashname.elf", "w");
        fwrite($fp, pack("H*", $code));
        fclose($fp);
        passthru("dfu-suffix -v 2B04 -p D006 -a $flashname.elf");
        /*
    #dfu-suffix -v 2B04 -p D006 -a ../../../build/target/system-part1/platform-6-m-lto/system-part1.dfu
    #dfu-util -d 0x2B04:0xD006 -a 0 -s 0x8020000 -D ../../../build/target/system-part1/platform-6-m-lto/system-part1.dfu
    #dfu-suffix -v 2B04 -p D006 -a ../../../build/target/system-part2/platform-6-m-lto/system-part2.dfu
    #dfu-util -d 0x2B04:0xD006 -a 0 -s 0x8060000 -D ../../../build/target/system-part2/platform-6-m-lto/system-part2.dfu
    #dfu-suffix -v 2B04 -p D006 -a ../../../build/target/user-part/platform-6-m/user-part.dfu
    #dfu-util -d 0x2B04:0xD006 -a 0 -s 0x80A0000:leave -D ../../../build/target/user-part/platform-6-m/user-part.dfu
        */
        $address = sprintf("0x%X", $key);
        if ($count == 1) {
            $address .= ":leave";
        }
        $command = "dfu-util -d 0x2B04:0xD006 -a 0 -s $address -D $flashname.elf";
        $cli->out($command);
        passthru($command, $ret);
        if (($ret == 0) || ($ret == 74)) {
            $ret = true;
        } else {
            $ret = false;
        }
        unlink("$flashname.elf");
        $count--;
    }
} else {
    $cli->out("I don't know how to load this\n");
    $cli->out("HW Part: ".$dev->get("HWPartNum"));
    $cli->out("FW Part: ".$fwpart);
}
/*
if ($ret) {
    $ret = $dev->action()->config();
}
*/
if (!$ret) {
    $cli->out("Failure!!!");
    exit(1);
}
$cli->out("Finished");


/**
* This writes the srecord
*
* @param string $data The data to write
* @param string $file The file name to use
*
* @return string the file name used
*/
function writeSREC($data, $file)
{


    $len = strlen($data)/2 + 3;
    $hexlen = strtoupper(dechex($len));
    $hexlen = str_pad($hexlen, 2, '0', STR_PAD_LEFT);
    $hexlen = substr(trim($hexlen), 0, 2);

    $string = $hexlen."0000".$data;
    $csum = 0;
    for ($i = 0; $i < $len; $i++) {
        $csum += hexdec(substr($string, $i*2, 2));
    }
    $csum = (~$csum) & 0xFF;
    $csum = strtoupper(dechex($csum));
    $csum = str_pad($csum, 2, '0', STR_PAD_LEFT);
    $csum = substr(trim($csum), 0, 2);
    $string .= $csum;

    @unlink($file);
    $fp = fopen($file, 'w');
    fwrite($fp, "S0090000736E2E656570AD\r\n");
    fwrite($fp, "S1".$string."\r\n");
    fwrite($fp, "S9030000FC\r\n");
    fclose($fp);

    return $file;

}

?>
