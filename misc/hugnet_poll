#!/usr/bin/env php
<?php
/**
 * Monitors incoming packets
 *
 * PHP Version 5
 *
 * <pre>
 * Scripts related to HUGnet
 * Copyright (C) 2007-2012 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Scripts
 * @package    Scripts
 * @subpackage Misc
 * @author     Scott Price <prices@hugllc.com>
 * @author     Jeff Liesmaki <jeffl@hugllc.com>
 * @copyright  2007-2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:Scripts
 *
 */
/** Packet log include stuff */
require_once 'HUGnetLib/HUGnetLib.php';

$config = HUGnetLib::Args(
    array(
        "i" => array("name" => "DeviceID", "type" => "string", "args" => true),
        "D" => array("name" => "Data", "type" => "string", "args" => true),
    ),
    "args",
    $argv
);

$config->addLocation("/usr/share/HUGnet/config.ini");
$cli = HUGnetLib::ui($config, "CLI");
$cli->help(
    $cli->system()->get("program")."
Copyright Hunt Utilities Group, LLC
HUGnet Scripts v".trim(file_get_contents("HUGnetScripts/VERSION.TXT", true))."  "
."HUGnetLib v".$cli->system()->get("version")."

Sends a series of DAC set packets to HUGnetLab endpoints.

Usage: ".$cli->system()->get("program")." -i <DeviceID> [-v] [-f <file>]
Arguments:
    -i <DeviceID>   The device ID to use.  Should be a hex value up to 6 digits
    -v              Increment the verbosity
    -f <file>       The config file to use",
    $config->h
);
if (strlen($config->i) == 0) {
    $cli->help();
    $cli->out();
    $cli->out("DeviceID must be specified");
    exit(1);
}

$dev = $cli->system()->device(hexdec($config->i));
$history = $dev->action()->poll();

$chans = $dev->dataChannels();
$hist = $history->toArray(true);
$chans->convert($hist);
if (is_object($history)) {
    $channels = $dev->dataChannels();
    $cli->out("Date: ".date("Y-m-d H:i:s", $history->get("Date")));
    for ($i = 0; $i < $channels->count(); $i++) {
        $chan = $channels->dataChannel($i);
        $cli->out(
            $chan->get("label").":"
            ."  ".$hist["Data".$i]." ".html_entity_decode($chan->get("units"))
            ."  (".$history->get("Data".$i)." ".html_entity_decode($chan->get("storageUnit")).")"
        );
    }
} else {
    $cli->out("Failed");
    exit(-1);
}

$cli->out("Finished");
exit(0);

?>
