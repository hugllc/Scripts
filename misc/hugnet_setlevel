#!/usr/bin/env php
<?php
/**
 * Monitors incoming packets
 *
 * PHP Version 5
 *
 * <pre>
 * Scripts related to HUGnet
 * Copyright (C) 2007-2012 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Scripts
 * @package    Scripts
 * @subpackage Misc
 * @author     Scott Price <prices@hugllc.com>
 * @author     Jeff Liesmaki <jeffl@hugllc.com>
 * @copyright  2007-2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:Scripts
 *
 */
/** Packet log include stuff */
require_once 'HUGnetLib/HUGnetLib.php';

$config = HUGnetLib::Args(
    array(
        "i" => array(
            "name" => "DeviceID", "type" => "string", "args" => true
        ),
        "D" => array(
            "name" => "Data", "type" => "string", "args" => true
        ),
        "V" => array(
            "name" => "Value", "type" => "string", "args" => true, "default" => 0
        ),
        "T" => array(
            "name" => "Low", "type" => "string", "args" => true, "default" => 0.01
        ),
    ),
    "args",
    $argv
);

$config->addLocation("/usr/share/HUGnet/config.ini");
$cli = HUGnetLib::ui($config, "CLI");
$cli->help(
    $cli->system()->get("program")."
Copyright Hunt Utilities Group, LLC
HUGnet Scripts v".trim(file_get_contents("HUGnetScripts/VERSION.TXT", true))."  "
."HUGnetLib v".$cli->system()->get("version")."

Sets the level for the level holder.

Usage: ".$cli->system()->get("program")." -i <DeviceID> -V <Value> -D <DataChannnel> [-T <tolerance>] [-v] [-f <file>]
Arguments:
    -i <DeviceID>    The device ID to use.  Should be a hex value up to 6 digits
    -D <DataChannel> Comma separated list of the datachannels to use
    -V <Value>       Comma separated list of the values to hold the datachannel at
    -T <Tolerance>   Tolerance on the values
    -v               Increment the verbosity
    -f <file>        The config file to use",
    $config->h
);
if (strlen($config->i) == 0) {
    $cli->help();
    $cli->out();
    $cli->out("DeviceID must be specified");
    exit(1);
}
if (strlen($config->D) == 0) {
    $cli->help();
    $cli->out();
    $cli->out("DataChannel must be specified");
    exit(1);
}
if (strlen($config->V) == 0) {
    $cli->help();
    $cli->out();
    $cli->out("Value(s) must be specified");
    exit(1);
}

$dac = array(
    "Driver" => 0x01,
    "DAC0Con" => 0x0013,  //DAC_DACCLR_NORM | DAC_RANGE_AVDD;
);

$dev = $cli->system()->device(hexdec($config->i));
$dac = array(
    "id" => 0x01,
    "extra" => array(
        0 => 0, // "Low Power Mode"
        1 => 0, // "Op Amp Mode"
        2 => 0, // "Output Buffer"
        3 => 0, // "Mode"
        4 => 0, // "Interpolation Clock"
        5 => 3  // "Range"
    ),
    "driver" => "ADuCDAC",
    "type" => "ADuCDAC",
    "location" => "DAC Added by setpid",
);

$reconfig = false;
$dev = $cli->system()->device(hexdec($config->i));
$control = -1;
$open = -1;
$cli->out("Checking for DAC OutputTable");
for ($i = 0; $i < $dev->get("OutputTables"); $i++) {
    $driver = (int)$dev->output($i)->get("id");
    if (($driver === 0xFF) && ($open < 0)) {
        $open = $i;
    } else if ($driver === 0x01) {
        $control = $i;
        break;
    }
}

if ($control < 0) {
    $cli->out("No DAC OutputTable found.");
    if ($open >= 0) {
        $cli->out("Attempting to add one.");
        $output = $dev->output($open);
        if ($output->change($dac)) {
            $reconfig = true;
            $control = $open;
            $cli->out("Added one in output $open.");
        } else {
            $cli->out("Add Failed.");
        }
    }
}
if ($control < 0) {
    $cli->out("No DAC Available.");
    exit(-1);
} else {
    $cli->out("Found a DAC setup on control $control");
}


$CGNDOffset = 0.95;
$stepVoltage = 2.5 / 4095;
$maxVoltage = 1.2;

$levelHolder = array(
    "Driver" => 0x01,
    "Priority" => 34,
    "Step" => 0x2,
    "Data" => explode(",", $config->D),
    "Control" => $control,
    "setpoints" => explode(",", $config->V),
    "tolerance" => (float)$config->T,
);



/*
"extraText" => array(
    "Priority",
    "Control",
    "Step",
    "Data Channel 0",
    "Set Point 0",
    "Tolerance 0",
    "Data Channel 1",
    "Set Point 1",
    "Tolerance 1",
    "Data Channel 2",
    "Set Point 2",
    "Tolerance 2",
),
*/
$level = array(
    "id" => 0x01,
    "type" => "LevelHolderProcess",
    "extra" => array(
        0 => $levelHolder["Priority"],
        1 => $levelHolder["Control"],
        2 => $levelHolder["Step"],
        3 => $levelHolder["Data"][0],
        4 => $levelHolder["setpoints"][0],
        5 => $levelHolder["tolerance"],
    ),
    "location" => "LevelHolder Added by setpid",
);
if (!is_null($levelHolder["Data"][1])) {
    $level["extra"][6] = $levelHolder["Data"][1];
    $level["extra"][7] = $levelHolder["setpoints"][1];
    $level["extra"][8] = $levelHolder["tolerance"];
    if (!is_null($levelHolder["Data"][2])) {
        $level["extra"][9] = $levelHolder["Data"][2];
        $level["extra"][10] = $levelHolder["setpoints"][2];
        $level["extra"][11] = $levelHolder["tolerance"];
    }
}
$process = -1;
$open = -1;
$cli->out("Checking for LevelHolder process");
for ($i = 0; $i < $dev->get("ProcessTables"); $i++) {
    $driver = (int)$dev->process($i)->get("id");
    if (($driver === 0xFF) && ($open < 0)) {
        $open = $i;
    } else if ($driver === 0x01) {
        $process = $i;
        break;
    }
}
if ($process < 0) {
    $cli->out("No LevelHolder process found.");
    if ($open >= 0) {
        $cli->out("Attempting to add one.");
        $proc = $dev->process($open);
        if ($proc->change($level)) {
            $process = $open;
            $cli->out("Added one in process $open.");
            $reconfig = true;
        } else {
            $cli->out("Add Failed.");
        }
    }
}
if ($process < 0) {
    $cli->out("No LevelHolder Available.");
    exit(-1);
} else {
    $cli->out("Found a LevelHolder setup on process $process");
}

if ($reconfig) {
    $dev->network()->loadConfig();
}

$cli->out("Setting the level holder in RAM (Changes won't be saved on reboot)");

$proc = $dev->process($process);
$proc->set("extra", $level["extra"]);
if ($proc->push()) {
    $cli->out("Done!");
} else {
    $cli->out("Failed");
}

print "Finished\n";

exit(0);

?>
