#!/usr/bin/env php
<?php
/**
 * Monitors incoming packets
 *
 * PHP Version 5
 *
 * <pre>
 * Scripts related to HUGnet
 * Copyright (C) 2007-2012 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Scripts
 * @package    Scripts
 * @subpackage Misc
 * @author     Scott Price <prices@hugllc.com>
 * @author     Jeff Liesmaki <jeffl@hugllc.com>
 * @copyright  2007-2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:Scripts
 *
 */
/** Packet log include stuff */
require_once 'HUGnetLib/HUGnetLib.php';

$config = HUGnetLib::Args(
    array(
        "i" => array(
            "name" => "DeviceID", "type" => "string", "args" => true
        ),
        "D" => array(
            "name" => "Data", "type" => "int", "args" => true, "default" => 0
        ),
        "H" => array(
            "name" => "High", "type" => "int", "args" => true, "default" => 0
        ),
        "L" => array(
            "name" => "Low", "type" => "int", "args" => true, "default" => 0
        ),
    ),
    "args",
    $argv
);

$config->addLocation("/usr/share/HUGnet/config.ini");
$cli = HUGnetLib::ui($config, "CLI");
$cli->help(
    $cli->system()->get("program")."
Copyright Hunt Utilities Group, LLC
HUGnet Scripts v".trim(file_get_contents("HUGnetScripts/VERSION.TXT", true))."  "
."HUGnetLib v".$cli->system()->get("version")."

Sets the level for the level holder.

Usage: ".$cli->system()->get("program")." -i <DeviceID> -h <Upper Limit> -l <Lower Limit> [-v] [-f <file>]
Arguments:
    -i <DeviceID>    The device ID to use.  Should be a hex value up to 6 digits
    -H <Upper Limit> The highest allowed value on the input
    -L <Lower Limit> The lowest allowed value on the input
    -v               Increment the verbosity
    -f <file>        The config file to use",
    $config->h
);
if ((strlen($config->i) == 0) || ($config->L <= $config->H)) {
    $cli->help();
    $cli->out();
    $cli->out("DeviceID must be specified");
    exit(1);
}

$dac = array(
    "Driver" => 0x01,
    "DAC0Con" => 0x0013,  //DAC_DACCLR_NORM | DAC_RANGE_AVDD;
);

$dev = $cli->system()->device(hexdec($config->i));
$reboot = false;
$control = -1;
$open = -1;
$cli->out("Checking for DAC OutputTable");
for ($i = 0; $i < $dev->get("OutputTables"); $i++) {
    $pkt = $dev->action()->send(
        array(
            "Command" => "READOUTPUTTABLE",
            "Data" => sprintf("%02X", $i),
        )
    );
    if (is_null($pkt->reply())) {
        $cli->out("Failed to contact device");
        exit(-1);
    }
    $driver = substr($pkt->reply(), 0, 2);
    if (($driver === "FF") && ($open < 0)) {
        $open = $i;
    } else if ($driver === "01") {
        $control = $i;
        break;
    }
}
if ($control < 0) {
    $cli->out("No DAC OutputTable found.");
    if ($open >= 0) {
        $cli->out("Attempting to add one.");
        $data = sprintf(
            "%02X%02X%02X",
            $dac["Driver"],
            $dac["DAC0Con"] & 0xFF,
            ($dac["DAC0Con"] >> 8) & 0xFF
        );
        $pkt = $dev->action()->send(
            array(
                "Command" => "SETOUTPUTTABLE",
                "Data" => sprintf("%02X", $open).$data,
            )
        );
        if (trim(strtoupper($pkt->reply())) == $data) {
            $control = $open;
            $cli->out("Added one in control $open.");
            $reboot = true;
        } else {
            $cli->out("Add Failed.");
        }
    }
}
if ($control < 0) {
    $cli->out("No DAC Available.");
    exit(-1);
} else {
    $cli->out("Found a DAC setup on control $control");
}

$CGNDOffset = 0.95;
$stepVoltage = 2.5 / 4095;
$maxVoltage = 1.2;

$levelHolder = array(
    "Driver" => 0x01,
    "Priority" => 34,
    "Step" => 0x2,
    "Data" => explode(",", $config->D),
    "Control" => $control,
    "Low" => explode(",", $config->L),
    "High" => explode(",", $config->H),
    "Min" => (int)($CGNDOffset / $stepVoltage),
    "Max" => (int)(($maxVoltage + $CGNDOffset) / $stepVoltage)
);

$process = -1;
$open = -1;
$cli->out("Checking for LevelHolder ProcessTable");
for ($i = 0; $i < $dev->get("ProcessTables"); $i++) {
    $pkt = $dev->action()->send(
        array(
            "Command" => "READPROCESSTABLE",
            "Data" => sprintf("%02X", $i),
        )
    );
    if (is_null($pkt->reply())) {
        $cli->out("Failed to contact device");
        exit(-1);
    }
    $driver = substr($pkt->reply(), 0, 2);
    if (($driver === "FF") && ($open < 0)) {
        $open = $i;
    } else if ($driver === "01") {
        $process = $i;
        break;
    }
}
if ($process < 0) {
    $cli->out("No LevelHolder ProcessTable found.");
    if ($open >= 0) {
        $cli->out("Attempting to add one.");
        $data = getProcessStr($levelHolder);

        $pkt = $dev->action()->send(
            array(
                "Command" => "SETPROCESSTABLE",
                "Data" => sprintf("%02X", $open).$data,
            )
        );
        if (trim(strtoupper($pkt->reply())) == $data) {
            $process = $open;
            $cli->out("Added one in process $open.");
            $reboot = true;
        } else {
            $cli->out("Add Failed.");
        }
    }
}
if ($process < 0) {
    $cli->out("No LevelHolder Available.");
    exit(-1);
} else {
    $cli->out("Found a LevelHolder setup on process $process");
}

if ($reboot) {
    $dev->network()->reboot();
    $cli->out("Rebooting.");
}


$cli->out("Setting the level holder in RAM (Changes won't be saved on reboot)");
$pkt = $dev->action()->send(
    array(
        "Command" => 'SETPROCESSTABLERAM',
        "Data" => sprintf("%02X", $process).getProcessStr($levelHolder),
    )
);
if (is_object($pkt)) {
    $reply = $pkt->Reply();
    if (is_null($reply)) {
        $cli->out("No Reply");
    } else if (!empty($reply)) {
        $cli->out("Done!");
    } else {
        $cli->out("Empty Reply");
    }
} else {
    $cli->out("No Reply");
}

print "Finished\n";

exit(0);


/**
 * This builds the string for the levelholder.
 *
 * @param array Values This is the values to use
 *
 * @return string The string
 */
function getProcessStr($Values)
{
    $data  = "";
    $data .= getProcessStrInt8($Values["Driver"]);
    $data .= getProcessStrInt8($Values["Priority"]);
    $data .= getProcessStrInt8($Values["Control"]);
    $data .= getProcessStrInt8($Values["Step"]);
    $data .= getProcessStrInt32($Values["Min"]);
    $data .= getProcessStrInt32($Values["Max"]);
    for ($i = 0; $i < count($Values["Data"]); $i++) {
        $data .= getProcessStrInt8($Values["Data"][$i]);
        $data .= getProcessStrInt32($Values["Low"][$i]);
        $data .= getProcessStrInt32($Values["High"][$i]);
    }

    return $data;
}
/**
 * This builds the string for the levelholder.
 *
 * @param int $val The value to use
 *
 * @return string The string
 */
function getProcessStrInt32($val)
{
    $val = (int)$val;
    return sprintf(
        "%02X%02X%02X%02X",
        ($val >> 0) & 0xFF,
        ($val >> 8) & 0xFF,
        ($val >> 16) & 0xFF,
        ($val >> 24) & 0xFF
    );

}
/**
 * This builds the string for the levelholder.
 *
 * @param int $val The value to use
 *
 * @return string The string
 */
function getProcessStrInt8($val)
{
    $val = (int)$val;
    return sprintf(
        "%02X",
        ($val >> 0) & 0xFF,
    );

}
?>
