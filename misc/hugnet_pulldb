#!/usr/bin/env php
<?php
/**
 * Monitors incoming packets
 *
 * PHP Version 5
 *
 * <pre>
 * Scripts related to HUGnet
 * Copyright (C) 2007-2012 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Scripts
 * @package    Scripts
 * @subpackage Misc
 * @author     Scott Price <prices@hugllc.com>
 * @author     Jeff Liesmaki <jeffl@hugllc.com>
 * @copyright  2007-2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:Scripts
 *
 */
/** Packet log include stuff */
require_once 'HUGnetLib/HUGnetLib.php';
define("MAX_DEVICES", 20);

$config = HUGnetLib::Args(
    array(
        "i" => array("name" => "DeviceID", "type" => "string", "args" => true),
        "D" => array("name" => "Data", "type" => "string", "args" => true),
    ),
    "args",
    $argv
);

$config->addLocation("/usr/share/HUGnet/config.ini");
$cli = HUGnetLib::ui($config, "Daemon");
$cli->help(
    $cli->system()->get("program")."
Copyright Hunt Utilities Group, LLC
HUGnet Scripts v".trim(file_get_contents("HUGnetScripts/VERSION.TXT", true))."  "
."HUGnetLib v".$cli->system()->get("version")."

Sends a series of DAC set packets to HUGnetLab endpoints.

Usage: ".$cli->system()->get("program")." [-v] [-f <file>]
Arguments:
    -v              Increment the verbosity
    -f <file>       The config file to use",
    $config->h
);

$master = $cli->system()->get("master");
$url    = $master["url"];

if (!is_string($url) || (strlen($url) == 0)) {
    $cli->help();
    $cli->out();
    $cli->out("Master URL not set in config.ini");
    exit(1);
}


/* Pull devices */
$start = 0;
$device = $cli->system()->device();
do {
    $ret = \HUGnet\Util::postData(
        $url,
        array(
            "uuid"   => urlencode($cli->system()->get("uuid")),
            "action" => "list",
            "task"   => "device",
            "data"   => array(
                "limit" => MAX_DEVICES,
                "start" => $start,
                "GatewayKey" => $cli->system()->get("GatewayKey"),
            ),
        ),
        120
    );
    if (!is_array($ret) || !$cli->loop()) {
        break;
    }
    $cli->out(
        "Checking devices $start to ".($start + count($ret))
    );
    foreach ($ret as $dev) {
        // Insert any unknown devices
        if (!$device->load($dev["id"])) {
            $device->table()->clearData();
            $device->table()->fromArray($dev);
            $res = $device->table()->insertRow(true);
        }
    }
    $start += MAX_DEVICES;
} while (count($ret) == MAX_DEVICES);

$now = $cli->system()->now();
$ids = $device->ids();
foreach (array_keys($ids) as $key) {
    $cli->system()->out("Working on ".sprintf("%06X", $key), 2);
    $cli->system()->main();
    if (!$cli->loop()) {
        break;
    }
    $device->load($key);
    $cli->system()->out(
        "Pulling ".sprintf("%06X", $device->id())." from master server..."
    );
    $ret = $device->action()->pull($url);
    if ($ret) {
        $cli->system()->out(
            "Successfully pulled ".sprintf("%06X", $device->id())."."
        );
        $device->load($device->id());
        $device->store();
    } else {
        $cli->system()->out("Failure.");
        /* Don't store it if we fail */
    }
}



$cli->out("Finished");
exit(0);

?>
