#!/usr/bin/env php
<?php
/**
 * Monitors incoming packets
 *
 * PHP Version 5
 *
 * <pre>
 * Scripts related to HUGnet
 * Copyright (C) 2007-2012 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Scripts
 * @package    Scripts
 * @subpackage Misc
 * @author     Scott Price <prices@hugllc.com>
 * @author     Jeff Liesmaki <jeffl@hugllc.com>
 * @copyright  2007-2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:Scripts
 *
 */
/** Packet log include stuff */
require_once 'HUGnetLib/HUGnetLib.php';

$config = HUGnetLib::Args(
    array(
        "i" => array("name" => "DeviceID", "type" => "string", "args" => true),
        "S" => array("name" => "Start", "type" => "string", "args" => true),
        "E" => array("name" => "End", "type" => "string", "args" => true),
        "D" => array(
            "name" => "Chans", "type" => "string", "args" => true, "default" => null
        ),
        "l" => array(
            "name" => "limit", "type" => "int", "args" => true, "default" => 1000
        ),
    ),
    "args",
    $argv
);

$config->addLocation("/usr/share/HUGnet/config.ini");
$cli = HUGnetLib::ui($config, "CLI");
$cli->help(
    $cli->system()->get("program")."
Copyright Hunt Utilities Group, LLC
HUGnet Scripts v".trim(file_get_contents("HUGnetScripts/VERSION.TXT", true))."  "
."HUGnetLib v".$cli->system()->get("version")."

This prints out raw values for the history between the dates given.  It defaults to
the last 24 hours.

Usage: ".$cli->system()->get("program")." -i <DeviceID> [-v] [-f <file>]
Arguments:
    -i <DeviceID>   The device ID to use.  Should be a hex value up to 6 digits
    -S <Date>       The date to start at
    -E <Date>       The date to end at
    -l <limit>      The maximum number of records to get.  Default 1000
    -D <Channels>   Comma separated list of data channels
    -v              Increment the verbosity
    -f <file>       The config file to use",
    $config->h
);
if (strlen($config->i) == 0) {
    $cli->help();
    $cli->out();
    $cli->out("DeviceID must be specified");
    exit(1);
}
$device   = $cli->system()->device(hexdec($config->i));
$channels = $device->dataChannels();

$start = \HUGnet\db\Table::unixDate($config->S);
$end   = \HUGnet\db\Table::unixDate($config->E);

if ($start == $end) {
    $start = $end - 86400;
}
if ($end <= $start) {
    $cli->help();
    $cli->out();
    $cli->out("Start must be before end");
    exit(1);
}
$channels = $device->dataChannels();
$chans    = (string)$config->D;
$chans    = explode(",", $chans);
if (empty($chans) || is_null($config->D)) {
    $chans = array_keys((array)$channels->toArray(false));
}
$raw   = $cli->system()->table("RawHistory");
$raw->sqlLimit = (int)$config->l;
$raw->sqlOrderBy = "Date ASC";

$ret = $raw->getPeriod(
    (int)$start,
    (int)$end,
    $device->get("id")
);
$header = "Date               ";
foreach ($chans as $key) {
    $label = $channels->dataChannel($key)->get("label");
    $header .= str_pad(substr($label, 0, 24), 28, " ", STR_PAD_LEFT);
}
$header .= "\n                   ";
foreach ($chans as $key) {
    $label = $channels->dataChannel($key)->get("label");
    $header .= str_pad("Raw", 14, " ", STR_PAD_LEFT);
    $header .= str_pad("Processed", 14, " ", STR_PAD_LEFT);
}
$cli->out($header);
$prev = array();
$lastTime = 0;
while ($ret) {
    $pkt    = json_decode($raw->get("packet"), true);
    $date   = $raw->get("Date");
    $output = date("Y-m-d H:i:s", $date);
    if (is_array($pkt) && is_string($pkt["Reply"])) {
        $string = $pkt["Reply"];
        //var_dump($string);
        $data   = $device->decodeData(
            $string,
            $pkt["Command"],
            $date - $lastTime,
            $prev
        );
        $lastTime = $date;
        //var_export($values);
        foreach ($chans as $key) {
            $value = $data[$key]["raw"];
            $output .= "  ";
            $output .= substr(
                str_pad(
                    (int)$data[$key]["raw"], 12, " ", STR_PAD_LEFT
                ),
                0, 12
            );
            $output .= "  ";
            $units   = html_entity_decode($data[$key]["units"]);
            $output .= substr(
                str_pad(
                    $data[$key]["value"]." ".$units,
                    12, 
                    " ", 
                    STR_PAD_LEFT
                ),
                0, 12
            );
        }
        $prev = $data;
    }
    $cli->out($output);
    $ret = $raw->nextInto();
}



$cli->out("Finished");
exit(0);

?>
